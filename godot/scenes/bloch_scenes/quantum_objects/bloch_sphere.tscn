[gd_scene load_steps=23 format=3 uid="uid://csc8ku5aalgf0"]

[ext_resource type="Script" uid="uid://8mfrin6a4pr1" path="res://scenes/bloch_scenes/quantum_objects/bloch_sphere.gd" id="1_04xke"]
[ext_resource type="Shader" uid="uid://dp81pw1j5xh2g" path="res://scenes/bloch_scenes/quantum_objects/bloch_sphere.gdshader" id="1_gd5jf"]
[ext_resource type="Script" uid="uid://pn1c6f0ic7uw" path="res://scenes/axes.gd" id="3_bi8iy"]

[sub_resource type="SphereMesh" id="SphereMesh_w2twt"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_04xke"]
render_priority = 0
shader = ExtResource("1_gd5jf")
shader_parameter/albedo = Color(0, 0, 0, 0)
shader_parameter/wire_color = Color(0, 0, 0, 0.462745)
shader_parameter/wire_width = 0.6
shader_parameter/wire_smoothness = 0.066

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_7ykc4"]
albedo_color = Color(0.780694, 4.54836e-06, 4.81307e-07, 1)
emission_enabled = true
emission = Color(0.532333, 0.0359835, 0, 1)
emission_energy_multiplier = 16.0

[sub_resource type="CylinderMesh" id="CylinderMesh_pu3yx"]
material = SubResource("StandardMaterial3D_7ykc4")
top_radius = 0.005
bottom_radius = 0.005
height = 0.5

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_p2vvt"]
transparency = 1
blend_mode = 1
cull_mode = 2
shading_mode = 0
albedo_color = Color(0.266667, 0.266667, 0.266667, 0.588235)

[sub_resource type="QuadMesh" id="QuadMesh_3irpl"]
lightmap_size_hint = Vector2i(7, 7)
material = SubResource("StandardMaterial3D_p2vvt")
size = Vector2(0.125, 0.125)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_3irpl"]
transparency = 1
albedo_color = Color(1, 1, 1, 0.376471)
emission_enabled = true
emission = Color(0.657026, 0.405307, 2.88785e-07, 1)

[sub_resource type="SphereMesh" id="SphereMesh_p2vvt"]
material = SubResource("StandardMaterial3D_3irpl")
radius = 0.125
height = 0.25

[sub_resource type="CapsuleMesh" id="CapsuleMesh_3irpl"]
material = SubResource("StandardMaterial3D_3irpl")
radius = 0.045
height = 1.0

[sub_resource type="Shader" id="Shader_3irpl"]
code = "shader_type spatial;
render_mode cull_disabled;
uniform vec4 color : source_color = vec4(1.0);
uniform float diameter = 1.0; // Circle Diameter
uniform float thickness = 0.05; // Outline thickness
uniform float frequency = 10.0; // Controls the number of dots
uniform float phase = 0.0; // Controls the rotation of the circle
uniform float theta_start = 0.0; // Start angle in radians
uniform float theta_end = 3.14; // End angle in radians
uniform float line_dot_frequency = 200.0; // More dots along the line
uniform float line_width = 0.005; // Thickness of the line
void fragment() {
  vec2 pos = UV - vec2(0.5);
  float outer_radius = diameter / 2.0;
  float inner_radius = outer_radius - thickness;
  float outer_circle = step(length(pos), outer_radius);
  float inner_circle = step(length(pos), inner_radius);
  EMISSION = vec3(1.0,1.0,1.0);

  float angle = atan(pos.y, pos.x);
  if (angle < 0.0) {
    angle += 2.0 * PI;
  }
  float angle_mask = step(theta_start, angle) * step(angle, theta_end);
  float wave = 0.5 * sin(frequency * angle + phase) + 0.5;
  

  float ring = (outer_circle - inner_circle) * angle_mask;
  ring *= step(0.5, wave);  
    // Compute endpoint of the circle at theta_end
    vec2 circle_end = vec2(cos(theta_end), sin(theta_end)) * outer_radius;

    // Line interpolation from circle_end to center
    float line_t = dot(pos - circle_end, -normalize(circle_end)) / length(circle_end);
    vec2 closest_point = mix(circle_end, vec2(0.0), clamp(line_t, 0.0, 1.0)); // Keeps the line from exceeding limits

    // Distance from current pixel to the line
    float dist_to_line = length(pos - closest_point);

    // Create the dotted pattern
    float line_progress = length(closest_point); // Measures distance along the line
    float line_dots = step(0.5, sin(line_progress * line_dot_frequency)); // Creates dot pattern
    float line = step(dist_to_line, line_width) * line_dots;

    ALBEDO = color.rgb;
    ALPHA = max(ring, line) * color.a;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_kc0oi"]
render_priority = 1
shader = SubResource("Shader_3irpl")
shader_parameter/color = Color(1, 1, 1, 1)
shader_parameter/diameter = 1.0
shader_parameter/thickness = 0.007
shader_parameter/frequency = 100.0
shader_parameter/phase = 0.0
shader_parameter/theta_start = 0.0
shader_parameter/theta_end = 0.0
shader_parameter/line_dot_frequency = 400.0
shader_parameter/line_width = 0.003

[sub_resource type="QuadMesh" id="QuadMesh_ngbyy"]
lightmap_size_hint = Vector2i(7, 7)
material = SubResource("ShaderMaterial_kc0oi")
orientation = 1

[sub_resource type="Shader" id="Shader_p2vvt"]
code = "shader_type spatial;
render_mode cull_disabled;
uniform vec4 color : source_color = vec4(1.0);
uniform float diameter = 1.0; // Circle Diameter
uniform float thickness = 0.05; // Outline thickness
uniform float frequency = 10.0; // Controls the number of dots
uniform float phase = 0.0; // Controls the rotation of the circle
uniform float theta_start = 0.0; // Start angle in radians
uniform float theta_end = 3.14; // End angle in radians
void fragment() {
  vec2 pos = UV - vec2(0.5);
  float outer_radius = diameter / 2.0;
  float inner_radius = outer_radius - thickness;
  float outer_circle = step(length(pos), outer_radius);
  float inner_circle = step(length(pos), inner_radius);
  EMISSION = vec3(1.0,1.0,1.0);

  float angle = atan(pos.y, pos.x);
  if (angle < 0.0) {
    angle += 2.0 * PI;
  }
  float angle_mask = step(theta_start, angle) * step(angle, theta_end);
  float wave = 0.5 * sin(frequency * angle + phase) + 0.5;
  

  float ring = (outer_circle - inner_circle) * angle_mask;
  //ring *= step(0.5, wave);  
	ALBEDO = color.rgb;
	ALPHA = ring * color.a;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_3irpl"]
render_priority = 1
shader = SubResource("Shader_p2vvt")
shader_parameter/color = Color(1, 1, 1, 1)
shader_parameter/diameter = 0.125
shader_parameter/thickness = 0.007
shader_parameter/frequency = 10.0
shader_parameter/phase = 0.0
shader_parameter/theta_start = 0.0
shader_parameter/theta_end = 0.0

[sub_resource type="QuadMesh" id="QuadMesh_l0arh"]
lightmap_size_hint = Vector2i(7, 7)
material = SubResource("ShaderMaterial_3irpl")
orientation = 1

[sub_resource type="Shader" id="Shader_kc0oi"]
code = "shader_type spatial;
render_mode cull_disabled;
uniform vec4 color : source_color = vec4(1.0);
uniform float diameter = 1.0; // Circle Diameter
uniform float thickness = 0.05; // Outline thickness
uniform float frequency = 300.0; // Controls the number of dots
uniform float phase = 0.0; // Controls the rotation of the circle
uniform float theta_start = 0.0; // Start angle in radians
uniform float theta_end = 3.14; // End angle in radians
uniform float line_thickness = 0.01;
void fragment() {
	vec2 pos = UV - vec2(0.5);
	float outer_radius = diameter / 2.0;
	float inner_radius = outer_radius - thickness;
	float outer_circle = step(length(pos), outer_radius);
	float inner_circle = step(length(pos), inner_radius);
	EMISSION = vec3(1.0,1.0,1.0);

	float angle = atan(pos.y, pos.x);
	float angle_2 = atan(1.0, pos.x);
	if (angle < 0.0) {
		angle += 2.0 * PI;
		angle_2 += 2.0 * PI;
	}
	float angle_mask = step(theta_start, angle) * step(angle, theta_end);
	float wave = 0.5 * sin(frequency * angle_2 + phase) + 0.2;

	float ring = (outer_circle - inner_circle) * angle_mask;
	// below is to draw the vertical line from the tip of the unit vector onto the xy plane
	float projected_length = cos(PI/2.0-theta_end)*0.5;
	if (pos.y > 0.0 && pos.x > angle_mask*0.5 && pos.y < projected_length && pos.y > projected_length-0.005){
		ring = 1.0*step(0.5, wave);
	}
	if (theta_end> PI/2.0 && pos.y > 0.0 && pos.x < angle_mask-0.5 && pos.x < 0.0 && pos.y < projected_length && pos.y > projected_length-0.005){
		ring = 1.0*step(0.5, wave);
	}
	//ring *= step(0.5, wave);  
	ALBEDO = color.rgb;
	ALPHA = ring * color.a;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_p2vvt"]
render_priority = 1
shader = SubResource("Shader_kc0oi")
shader_parameter/color = Color(1, 1, 1, 1)
shader_parameter/diameter = 0.6
shader_parameter/thickness = 0.007
shader_parameter/frequency = 300.0
shader_parameter/phase = 0.0
shader_parameter/theta_start = 0.0
shader_parameter/theta_end = 0.0
shader_parameter/line_thickness = 0.05

[sub_resource type="QuadMesh" id="QuadMesh_3yv1i"]
lightmap_size_hint = Vector2i(7, 7)
material = SubResource("ShaderMaterial_p2vvt")

[sub_resource type="ImmediateMesh" id="ImmediateMesh_wckv8"]

[node name="bloch_sphere" type="Node3D"]
script = ExtResource("1_04xke")

[node name="sphere_mesh" type="MeshInstance3D" parent="."]
mesh = SubResource("SphereMesh_w2twt")
surface_material_override/0 = SubResource("ShaderMaterial_04xke")

[node name="Anchor_node" type="Node3D" parent="sphere_mesh"]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0, 0)

[node name="vector_mesh" type="MeshInstance3D" parent="sphere_mesh/Anchor_node"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.25, 0)
mesh = SubResource("CylinderMesh_pu3yx")
skeleton = NodePath("../..")

[node name="flag_anchor" type="Node3D" parent="sphere_mesh/Anchor_node"]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, 0, 0.432004, 0)

[node name="flag" type="MeshInstance3D" parent="sphere_mesh/Anchor_node/flag_anchor"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.062, 0, 0)
mesh = SubResource("QuadMesh_3irpl")

[node name="global_phase_vector" type="Node3D" parent="sphere_mesh"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.54418, 0)

[node name="head" type="MeshInstance3D" parent="sphere_mesh/global_phase_vector"]
transform = Transform3D(-1.09278e-08, -0.25, 0, 0.25, -1.09278e-08, 0, 0, 0, 0.25, 0.122, 0, 0)
mesh = SubResource("SphereMesh_p2vvt")
skeleton = NodePath("")

[node name="body" type="MeshInstance3D" parent="sphere_mesh/global_phase_vector"]
transform = Transform3D(-1.09278e-08, -0.25, 0, 0.25, -1.09278e-08, 0, 0, 0, 0.25, 0, 0, 0)
mesh = SubResource("CapsuleMesh_3irpl")

[node name="phi_mesh" type="MeshInstance3D" parent="sphere_mesh"]
transform = Transform3D(1, -8.74228e-08, -8.74228e-08, -8.74228e-08, -1, 0, -8.74228e-08, 7.64274e-15, -1, 0, 0, 0)
mesh = SubResource("QuadMesh_ngbyy")

[node name="phi_mesh_small" type="MeshInstance3D" parent="sphere_mesh"]
transform = Transform3D(1, -8.74228e-08, -8.74228e-08, -8.74228e-08, -1, 0, -8.74228e-08, 7.64274e-15, -1, 0, 0, 0)
mesh = SubResource("QuadMesh_l0arh")

[node name="theta_mesh_small" type="MeshInstance3D" parent="sphere_mesh"]
transform = Transform3D(-4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0, 1, 0, 0, 0)
mesh = SubResource("QuadMesh_3yv1i")
skeleton = NodePath("../phi_mesh_small")

[node name="axes" type="MeshInstance3D" parent="."]
mesh = SubResource("ImmediateMesh_wckv8")
script = ExtResource("3_bi8iy")

[node name="axis labels" type="Node3D" parent="."]

[node name="∣+⟩" type="Label3D" parent="axis labels"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.2, 0, 0)
pixel_size = 0.0018
billboard = 1
text = "∣+⟩"

[node name="∣-⟩" type="Label3D" parent="axis labels"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1.2, 0, 0)
pixel_size = 0.0018
billboard = 1
text = "∣-⟩"

[node name="∣-i⟩" type="Label3D" parent="axis labels"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1.2)
pixel_size = 0.0018
billboard = 1
text = "∣-i⟩"

[node name="∣i⟩" type="Label3D" parent="axis labels"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1.2)
pixel_size = 0.0018
billboard = 1
text = "∣i⟩"

[node name="anchor_phi" type="Node3D" parent="axis labels"]

[node name="ϕ" type="Label3D" parent="axis labels/anchor_phi"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.1, 0, 0)
pixel_size = 0.0018
billboard = 1
modulate = Color(1, 0.206411, 0.956527, 1)
text = "ϕ"
font_size = 26

[node name="anchor_theta" type="Node3D" parent="axis labels"]

[node name="θ" type="Label3D" parent="axis labels/anchor_theta"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.35, 0)
pixel_size = 0.0018
billboard = 1
modulate = Color(0, 0.701011, 0.707311, 1)
text = "θ"
font_size = 26
